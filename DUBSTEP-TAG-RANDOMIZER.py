import random
import os
import sys
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import openpyxl
from openpyxl.utils import column_index_from_string
import re

def load_tags_from_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏, —Ç–∞–∫ –∏ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ç–µ–≥–∏"""
    try:
        if not os.path.exists(filename):
            return []
        
        with open(filename, 'r', encoding='utf-8') as file:
            content = file.read().strip()
            
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º –ò–õ–ò –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        tags = []
        lines = content.split('\n')
        for line in lines:
            line = line.strip()
            if ',' in line:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—ã–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –Ω–∏–º
                tags.extend([tag.strip() for tag in line.split(',') if tag.strip()])
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–≥
                if line:
                    tags.append(line)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        tags = list(dict.fromkeys(tags))
        return tags
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def save_tags_to_file(tags, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(', '.join(tags))
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def parse_excel_cell(cell_address):
    """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å —è—á–µ–π–∫–∏ Excel (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'D4') –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü"""
    try:
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±—É–∫–≤ (—Å—Ç–æ–ª–±–µ—Ü) –∏ —Ü–∏—Ñ—Ä (—Å—Ç—Ä–æ–∫–∞)
        match = re.match(r'([A-Za-z]+)(\d+)$', cell_address.upper())
        if match:
            col_letter = match.group(1)
            row_number = int(match.group(2))
            return row_number, col_letter
        return None, None
    except:
        return None, None

def write_to_excel(tags_list, filename, start_cell, direction, sheet_name=None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ Excel —Ñ–∞–π–ª"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        if os.path.exists(filename):
            workbook = openpyxl.load_workbook(filename)
        else:
            workbook = openpyxl.Workbook()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç
        if sheet_name:
            if sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
            else:
                sheet = workbook.create_sheet(sheet_name)
        else:
            sheet = workbook.active
        
        # –ü–∞—Ä—Å–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É
        start_row, start_col_letter = parse_excel_cell(start_cell)
        if not start_row or not start_col_letter:
            return False, "error_excel_cell"
        
        start_col = column_index_from_string(start_col_letter)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–≥–∏
        current_row = start_row
        current_col = start_col
        
        for tags in tags_list:
            if direction == "down":
                sheet.cell(row=current_row, column=current_col).value = tags
                current_row += 1
            else:  # right
                sheet.cell(row=current_row, column=current_col).value = tags
                current_col += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        workbook.save(filename)
        return True, "success_excel_write"
        
    except Exception as e:
        return False, f"error_excel_write_generic: {str(e)}"

class TagGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–≥–æ–≤")
        self.root.geometry("680x700")
        self.root.resizable(True, True)
        
        # –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
        self.current_language = "RU"
        
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        self.translations = {
            "RU": {
                "title": "üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–≥–æ–≤",
                "available_tags": "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏",
                "main_tags": "–ì–ª–∞–≤–Ω—ã–µ —Ç–µ–≥–∏: {} —à—Ç—É–∫",
                "important_tags": "–í–∞–∂–Ω—ã–µ —Ç–µ–≥–∏: {} —à—Ç—É–∫",
                "additional_tags": "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏: {} —à—Ç—É–∫",
                "total_tags_frame": "1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤",
                "total_tags_label": "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ?",
                "important_tags_frame": "2. –í–∞–∂–Ω—ã–µ —Ç–µ–≥–∏",
                "important_tags_label": "–°–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å?",
                "other_tags_frame": "3. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏",
                "other_tags_label": "–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ:",
                "excel_frame": "üìä –ó–∞–ø–∏—Å—å –≤ Excel (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                "excel_check": "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel —Ñ–∞–π–ª",
                "excel_file": "–§–∞–π–ª Excel:",
                "excel_sheet": "–õ–∏—Å—Ç:",
                "excel_cell": "–ù–∞—á–∞–ª—å–Ω–∞—è —è—á–µ–π–∫–∞:",
                "excel_cell_example": "(–Ω–∞–ø—Ä–∏–º–µ—Ä: D4)",
                "excel_direction": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                "excel_down": "–í–Ω–∏–∑ (—Å—Ç–æ–ª–±–µ—Ü)",
                "excel_right": "–í–ø—Ä–∞–≤–æ (—Å—Ç—Ä–æ–∫–∞)",
                "excel_generations": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:",
                "status_ready": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "status_enter_total": "–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤",
                "status_too_many_main": "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–ª–∞–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤! –£–º–µ–Ω—å—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–≥–∏",
                "status_too_many_important": "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤!",
                "status_not_enough_important": "‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤ —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ!",
                "status_ready_to_generate": "‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!",
                "status_enter_valid_numbers": "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞",
                "generate_button": "üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏",
                "result_frame": "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç",
                "copy_button": "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "language_button": "ENG",
                "error_title": "–û—à–∏–±–∫–∞",
                "success_title": "–£—Å–ø–µ—Ö",
                "warning_title": "–í–Ω–∏–º–∞–Ω–∏–µ",
                "error_main_tags_exceed": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!",
                "error_too_many_important": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤!",
                "error_not_enough_important": "–ó–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤ —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ!",
                "error_generations_positive": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!",
                "error_enter_valid_numbers": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!",
                "error_excel_cell": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è—á–µ–π–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ 'D4'",
                "error_excel_write": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Excel: {}",
                "error_save_file": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª!",
                "error_unknown": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {}",
                "success_generated_single": "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} —Ç–µ–≥–æ–≤!\nüìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: result_tags.txt\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ —Ç–µ–≥–∏: {}\n‚Ä¢ –í–∞–∂–Ω—ã–µ —Ç–µ–≥–∏: {}\n‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏: {}",
                "success_generated_multiple": "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ–≥–æ–≤!\nüìä –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Excel —Ñ–∞–π–ª\n\n{}",
                "success_copied": "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!",
                "warning_no_result": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!",
                "success_excel_message": "–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ {} –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ–≥–æ–≤ –≤ —Ñ–∞–π–ª {}",
                "error_excel_write_generic": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Excel: {}"
            },
            "ENG": {
                "title": "üè∑Ô∏è Tag Generator",
                "available_tags": "üìä Available Tags",
                "main_tags": "Main tags: {} items",
                "important_tags": "Important tags: {} items",
                "additional_tags": "Other tags: {} items",
                "total_tags_frame": "1. Total Number of Tags",
                "total_tags_label": "How many total tags should be generated?",
                "important_tags_frame": "2. Important Tags",
                "important_tags_label": "How many important tags to add?",
                "other_tags_frame": "3. Other Tags",
                "other_tags_label": "How many other tags will be added:",
                "excel_frame": "üìä Excel Export (optional)",
                "excel_check": "Save results to Excel file",
                "excel_file": "Excel file:",
                "excel_sheet": "Sheet:",
                "excel_cell": "Starting cell:",
                "excel_cell_example": "(e.g., D4)",
                "excel_direction": "Direction:",
                "excel_down": "Down (column)",
                "excel_right": "Right (row)",
                "excel_generations": "Number of generations:",
                "status_ready": "Ready to work",
                "status_enter_total": "Enter total number of tags",
                "status_too_many_main": "‚ùå Too many main tags! Reduce total number or main tags",
                "status_too_many_important": "‚ùå Too many important tags!",
                "status_not_enough_important": "‚ùå Requested more important tags than available!",
                "status_ready_to_generate": "‚úÖ Everything ready to generate!",
                "status_enter_valid_numbers": "‚ö†Ô∏è Enter valid numbers",
                "generate_button": "üöÄ Generate Tags",
                "result_frame": "üìã Result",
                "copy_button": "üìã Copy Result",
                "language_button": "RU",
                "error_title": "Error",
                "success_title": "Success",
                "warning_title": "Warning",
                "error_main_tags_exceed": "Number of main tags exceeds total number!",
                "error_too_many_important": "Too many important tags!",
                "error_not_enough_important": "Requested more important tags than available!",
                "error_generations_positive": "Number of generations must be a positive number!",
                "error_enter_valid_numbers": "Please enter valid numbers!",
                "error_excel_cell": "Invalid cell format. Use format like 'D4'",
                "error_excel_write": "Error writing to Excel: {}",
                "error_save_file": "Failed to save file!",
                "error_unknown": "An error occurred: {}",
                "success_generated_single": "‚úÖ Generated {} tags!\nüìÅ Saved to: result_tags.txt\n\nüìä Statistics:\n‚Ä¢ Main tags: {}\n‚Ä¢ Important tags: {}\n‚Ä¢ Other tags: {}",
                "success_generated_multiple": "‚úÖ Generated {} sets of tags!\nüìä Written to Excel file\n\n{}",
                "success_copied": "Result copied to clipboard!",
                "warning_no_result": "No result to copy!",
                "success_excel_message": "Successfully written {} sets of tags to file {}",
                "error_excel_write_generic": "Error writing to Excel: {}"
            }
        }
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.permanent_tags = load_tags_from_file('main_tags.txt')
        self.important_tags = load_tags_from_file('additional_tags.txt')
        self.additional_tags = load_tags_from_file('other_tags.txt')
        
        self.setup_ui()
        self.update_counts()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def get_text(self, key):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ"""
        return self.translations[self.current_language].get(key, key)
    
    def toggle_language(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.current_language = "ENG" if self.current_language == "RU" else "RU"
        self.update_ui_language()
    
    def update_ui_language(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.root.title(self.get_text("title"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞
        self.language_btn.config(text=self.get_text("language_button"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ—Ä–µ–π–º–æ–≤
        self.title_label.config(text=self.get_text("title"))
        self.info_frame.config(text=self.get_text("available_tags"))
        self.total_frame.config(text=self.get_text("total_tags_frame"))
        self.important_frame.config(text=self.get_text("important_tags_frame"))
        self.other_frame.config(text=self.get_text("other_tags_frame"))
        self.excel_file_label.config(text=self.get_text("excel_file"))
        self.sheet_label.config(text=self.get_text("excel_sheet"))
        self.cell_label.config(text=self.get_text("excel_cell"))
        self.cell_example_label.config(text=self.get_text("excel_cell_example"))
        self.direction_label.config(text=self.get_text("excel_direction"))
        self.down_radio.config(text=self.get_text("excel_down"))
        self.right_radio.config(text=self.get_text("excel_right"))
        self.generations_label.config(text=self.get_text("excel_generations"))
        self.result_frame.config(text=self.get_text("result_frame"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –º–µ—Ç–æ–∫
        self.total_label.config(text=self.get_text("total_tags_label"))
        self.important_label.config(text=self.get_text("important_tags_label"))
        self.other_label.config(text=self.get_text("other_tags_label"))
        self.excel_check.config(text=self.get_text("excel_check"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.generate_btn.config(text=self.get_text("generate_button"))
        self.copy_btn.config(text=self.get_text("copy_button"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_counts()
        self.update_status()
    
    def setup_ui(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–∫–Ω–∞
        self.root.configure(bg='#f0f0f0')
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_container = tk.Frame(self.root, bg='#f0f0f0')
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º canvas –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.canvas = tk.Canvas(main_container, bg='#f0f0f0', highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_container, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg='#f0f0f0')
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –≤ canvas
        self.canvas_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        
        self.canvas.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º canvas –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        self._bind_to_mousewheel(self.scrollable_frame)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.canvas.bind("<Configure>", self.on_canvas_configure)
        
        main_frame = tk.Frame(self.scrollable_frame, bg='#f0f0f0', padx=10, pady=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —è–∑—ã–∫–∞
        title_frame = tk.Frame(main_frame, bg='#f0f0f0')
        title_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.title_label = tk.Label(title_frame, text=self.get_text("title"), 
                              font=('Arial', 12, 'bold'), bg='#f0f0f0')
        self.title_label.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.language_btn = tk.Button(title_frame, text=self.get_text("language_button"),
                                    font=('Arial', 9), width=4, height=1,
                                    command=self.toggle_language, relief='raised', bd=1)
        self.language_btn.pack(side=tk.RIGHT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–∞—Ö
        self.info_frame = tk.LabelFrame(main_frame, text=self.get_text("available_tags"), bg='#f0f0f0', 
                                 font=('Arial', 10, 'bold'), padx=10, pady=10)
        self.info_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.permanent_count_label = tk.Label(self.info_frame, text="", 
                                            font=('Arial', 9), bg='#f0f0f0', anchor='w')
        self.permanent_count_label.pack(fill=tk.X)
        
        self.important_count_label = tk.Label(self.info_frame, text="", 
                                            font=('Arial', 9), bg='#f0f0f0', anchor='w')
        self.important_count_label.pack(fill=tk.X)
        
        self.additional_count_label = tk.Label(self.info_frame, text="", 
                                             font=('Arial', 9), bg='#f0f0f0', anchor='w')
        self.additional_count_label.pack(fill=tk.X)
        
        # –ü–æ–ª–µ –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–≥–æ–≤
        self.total_frame = tk.LabelFrame(main_frame, text=self.get_text("total_tags_frame"), bg='#f0f0f0',
                                  font=('Arial', 10, 'bold'), padx=10, pady=10)
        self.total_frame.pack(fill=tk.X, pady=(0, 8))
        
        total_inner_frame = tk.Frame(self.total_frame, bg='#f0f0f0')
        total_inner_frame.pack(fill=tk.X)
        
        # –¢–µ–∫—Å—Ç total_tags
        self.total_label = tk.Label(total_inner_frame, text=self.get_text("total_tags_label"), 
                font=('Arial', 9), bg='#f0f0f0', width=42, anchor='w', justify='left')
        self.total_label.pack(side=tk.LEFT, fill='x', expand=True)
        
        self.total_var = tk.StringVar()
        self.total_entry = tk.Entry(total_inner_frame, textvariable=self.total_var, 
                                  font=('Arial', 10), width=8, relief='solid', bd=1)
        self.total_entry.pack(side=tk.RIGHT, padx=(10, 0))
        
        self.total_var.trace('w', self.on_total_changed)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤
        self.important_frame = tk.LabelFrame(main_frame, text=self.get_text("important_tags_frame"), bg='#f0f0f0',
                                      font=('Arial', 10, 'bold'), padx=10, pady=10)
        self.important_frame.pack(fill=tk.X, pady=(0, 8))
        
        important_inner_frame = tk.Frame(self.important_frame, bg='#f0f0f0')
        important_inner_frame.pack(fill=tk.X)
        
        # –¢–µ–∫—Å—Ç important_tags
        self.important_label = tk.Label(important_inner_frame, text=self.get_text("important_tags_label"), 
                font=('Arial', 9), bg='#f0f0f0', width=42, anchor='w', justify='left')
        self.important_label.pack(side=tk.LEFT, fill='x', expand=True)
        
        self.important_var = tk.StringVar()
        self.important_entry = tk.Entry(important_inner_frame, textvariable=self.important_var, 
                                      font=('Arial', 10), width=8, relief='solid', bd=1)
        self.important_entry.pack(side=tk.RIGHT, padx=(10, 0))
        
        self.important_var.trace('w', self.on_important_changed)
        
        # –ü–æ–ª–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        self.other_frame = tk.LabelFrame(main_frame, text=self.get_text("other_tags_frame"), bg='#f0f0f0',
                                  font=('Arial', 10, 'bold'), padx=10, pady=10)
        self.other_frame.pack(fill=tk.X, pady=(0, 10))
        
        other_inner_frame = tk.Frame(self.other_frame, bg='#f0f0f0')
        other_inner_frame.pack(fill=tk.X)
        
        # –¢–µ–∫—Å—Ç other_tags
        self.other_label = tk.Label(other_inner_frame, text=self.get_text("other_tags_label"), 
                font=('Arial', 9), bg='#f0f0f0', width=42, anchor='w', justify='left')
        self.other_label.pack(side=tk.LEFT, fill='x', expand=True)
        
        self.other_var = tk.StringVar(value="0")
        self.other_entry = tk.Entry(other_inner_frame, textvariable=self.other_var, 
                                  state='readonly', font=('Arial', 10), foreground='blue', 
                                  width=8, relief='solid', bd=1)
        self.other_entry.pack(side=tk.RIGHT, padx=(10, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel
        self.excel_frame = tk.LabelFrame(main_frame, text=self.get_text("excel_frame"), bg='#f0f0f0',
                                  font=('Arial', 10, 'bold'), padx=10, pady=10)
        self.excel_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Excel
        self.excel_var = tk.BooleanVar()
        self.excel_check = tk.Checkbutton(self.excel_frame, text=self.get_text("excel_check"), 
                                        variable=self.excel_var, command=self.toggle_excel_fields,
                                        font=('Arial', 9), bg='#f0f0f0', anchor='w')
        self.excel_check.pack(fill=tk.X, pady=(0, 8))
        
        # –ü–æ–ª—è –¥–ª—è Excel (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã)
        self.excel_fields_frame = tk.Frame(self.excel_frame, bg='#f0f0f0')
        
        # –§–∞–π–ª Excel
        file_frame = tk.Frame(self.excel_fields_frame, bg='#f0f0f0')
        file_frame.pack(fill=tk.X, pady=(0, 5))
        self.excel_file_label = tk.Label(file_frame, text=self.get_text("excel_file"), font=('Arial', 9), bg='#f0f0f0', width=19, anchor='w', justify='left')
        self.excel_file_label.pack(side=tk.LEFT)
        self.excel_file_var = tk.StringVar(value="tags.xlsx")
        self.excel_file_entry = tk.Entry(file_frame, textvariable=self.excel_file_var, 
                                    font=('Arial', 9), width=15, relief='solid', bd=1)
        self.excel_file_entry.pack(side=tk.LEFT, padx=(10, 0))

        # –õ–∏—Å—Ç
        sheet_frame = tk.Frame(self.excel_fields_frame, bg='#f0f0f0')
        sheet_frame.pack(fill=tk.X, pady=(0, 5))
        self.sheet_label = tk.Label(sheet_frame, text=self.get_text("excel_sheet"), font=('Arial', 9), bg='#f0f0f0', width=19, anchor='w', justify='left')
        self.sheet_label.pack(side=tk.LEFT)
        self.sheet_var = tk.StringVar(value="Tags")
        self.sheet_entry = tk.Entry(sheet_frame, textvariable=self.sheet_var, 
                                font=('Arial', 9), width=10, relief='solid', bd=1)
        self.sheet_entry.pack(side=tk.LEFT, padx=(10, 0))

        # –ù–∞—á–∞–ª—å–Ω–∞—è —è—á–µ–π–∫–∞
        cell_frame = tk.Frame(self.excel_fields_frame, bg='#f0f0f0')
        cell_frame.pack(fill=tk.X, pady=(0, 5))
        self.cell_label = tk.Label(cell_frame, text=self.get_text("excel_cell"), font=('Arial', 9), bg='#f0f0f0', width=19, anchor='w', justify='left')
        self.cell_label.pack(side=tk.LEFT)
        self.cell_var = tk.StringVar(value="A1")
        self.cell_entry = tk.Entry(cell_frame, textvariable=self.cell_var, 
                                font=('Arial', 9), width=8, relief='solid', bd=1)
        self.cell_entry.pack(side=tk.LEFT, padx=(10, 0))
        self.cell_example_label = tk.Label(cell_frame, text=self.get_text("excel_cell_example"), font=('Arial', 8), bg='#f0f0f0', 
                fg='#666666')
        self.cell_example_label.pack(side=tk.LEFT, padx=(5, 0))

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        direction_frame = tk.Frame(self.excel_fields_frame, bg='#f0f0f0')
        direction_frame.pack(fill=tk.X, pady=(0, 5))
        self.direction_label = tk.Label(direction_frame, text=self.get_text("excel_direction"), font=('Arial', 9), bg='#f0f0f0', width=19, anchor='w', justify='left')
        self.direction_label.pack(side=tk.LEFT)
        self.direction_var = tk.StringVar(value="down")
        self.down_radio = tk.Radiobutton(direction_frame, text=self.get_text("excel_down"), font=('Arial', 9),
                    variable=self.direction_var, value="down", bg='#f0f0f0')
        self.down_radio.pack(side=tk.LEFT, padx=(10, 5))
        self.right_radio = tk.Radiobutton(direction_frame, text=self.get_text("excel_right"), font=('Arial', 9),
                    variable=self.direction_var, value="right", bg='#f0f0f0')
        self.right_radio.pack(side=tk.LEFT)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        count_frame = tk.Frame(self.excel_fields_frame, bg='#f0f0f0')
        count_frame.pack(fill=tk.X, pady=(0, 5))
        self.generations_label = tk.Label(count_frame, text=self.get_text("excel_generations"), font=('Arial', 9), bg='#f0f0f0', width=19, anchor='w', justify='left')
        self.generations_label.pack(side=tk.LEFT)
        self.generations_var = tk.StringVar(value="1")
        self.generations_entry = tk.Entry(count_frame, textvariable=self.generations_var, 
                                        font=('Arial', 9), width=8, relief='solid', bd=1)
        self.generations_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        self.excel_fields_frame.pack(fill=tk.X)
        self.excel_fields_frame.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value=self.get_text("status_ready"))
        self.status_label = tk.Label(main_frame, textvariable=self.status_var, 
                                   font=('Arial', 9), bg='#f0f0f0', fg='green')
        self.status_label.pack(pady=(0, 8))
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_btn = tk.Button(main_frame, text=self.get_text("generate_button"), 
                                    font=('Arial', 10, 'bold'), bg='#28a745', fg='white',
                                    relief='raised', bd=2, command=self.generate_tags)
        self.generate_btn.pack(pady=(0, 10))
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_frame = tk.LabelFrame(main_frame, text=self.get_text("result_frame"), bg='#f0f0f0',
                                   font=('Arial', 10, 'bold'), padx=10, pady=10)
        self.result_frame.pack(fill=tk.BOTH, expand=True)
        
        self.result_text = scrolledtext.ScrolledText(self.result_frame, height=8, font=('Arial', 9),
                                                   relief='solid', bd=1)
        self.result_text.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.copy_btn = tk.Button(main_frame, text=self.get_text("copy_button"), font=('Arial', 9),
                 command=self.copy_result, relief='raised', bd=1)
        self.copy_btn.pack(pady=(8, 0))
    
    def _bind_to_mousewheel(self, widget):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∫ –≤–∏–¥–∂–µ—Ç—É –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        widget.bind("<MouseWheel>", self._on_mousewheel)
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        for child in widget.winfo_children():
            child.bind("<MouseWheel>", self._on_mousewheel)
            if hasattr(child, 'winfo_children') and child.winfo_children():
                self._bind_to_mousewheel(child)
    
    def _on_mousewheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏"""
        self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def on_canvas_configure(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–≤–Ω–æ–π —à–∏—Ä–∏–Ω–µ canvas
        self.canvas.itemconfig(self.canvas_frame, width=event.width)
    
    def toggle_excel_fields(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—è –¥–ª—è Excel"""
        if self.excel_var.get():
            self.excel_fields_frame.pack(fill=tk.X)
        else:
            self.excel_fields_frame.pack_forget()
    
    def update_counts(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–∞—Ö"""
        self.permanent_count_label.config(
            text=self.get_text("main_tags").format(len(self.permanent_tags))
        )
        self.important_count_label.config(
            text=self.get_text("important_tags").format(len(self.important_tags))
        )
        self.additional_count_label.config(
            text=self.get_text("additional_tags").format(len(self.additional_tags))
        )
    
    def on_total_changed(self, *args):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–≥–æ–≤"""
        self.update_other_count()
        self.update_status()
    
    def on_important_changed(self, *args):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
        self.update_other_count()
        self.update_status()
    
    def update_other_count(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
        try:
            total = int(self.total_var.get()) if self.total_var.get() else 0
            important = int(self.important_var.get()) if self.important_var.get() else 0
            
            if total > 0:
                permanent_used = min(len(self.permanent_tags), total)
                available_for_other = total - permanent_used - important
                other_count = max(0, min(available_for_other, len(self.additional_tags)))
                self.other_var.set(str(other_count))
            else:
                self.other_var.set("0")
        except ValueError:
            self.other_var.set("0")
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        try:
            total = int(self.total_var.get()) if self.total_var.get() else 0
            important = int(self.important_var.get()) if self.important_var.get() else 0
            
            if total == 0:
                self.status_var.set(self.get_text("status_enter_total"))
                self.status_label.config(fg='black')
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤
            if len(self.permanent_tags) > total:
                self.status_var.set(self.get_text("status_too_many_main"))
                self.status_label.config(fg='red')
                return
            
            permanent_used = min(len(self.permanent_tags), total)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤
            if important > (total - permanent_used):
                self.status_var.set(self.get_text("status_too_many_important"))
                self.status_label.config(fg='red')
                return
            
            if important > len(self.important_tags):
                self.status_var.set(self.get_text("status_not_enough_important"))
                self.status_label.config(fg='red')
                return
            
            self.status_var.set(self.get_text("status_ready_to_generate"))
            self.status_label.config(fg='green')
            
        except ValueError:
            self.status_var.set(self.get_text("status_enter_valid_numbers"))
            self.status_label.config(fg='orange')
    
    def generate_single_tags(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –Ω–∞–±–æ—Ä —Ç–µ–≥–æ–≤"""
        total_tags_needed = int(self.total_var.get())
        important_count = int(self.important_var.get()) if self.important_var.get() else 0
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_tags = self.permanent_tags.copy()
        remaining_slots = total_tags_needed - len(result_tags)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ç–µ–≥–∏
        if remaining_slots > 0 and important_count > 0:
            selected_important = random.sample(self.important_tags, important_count)
            result_tags.extend(selected_important)
            remaining_slots -= important_count
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
        if remaining_slots > 0 and self.additional_tags:
            additional_count = min(remaining_slots, len(self.additional_tags))
            if additional_count > 0:
                selected_additional = random.sample(self.additional_tags, additional_count)
                result_tags.extend(selected_additional)
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(result_tags) > total_tags_needed:
            result_tags = result_tags[:total_tags_needed]
        
        return ', '.join(result_tags)
    
    def generate_tags(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤"""
        try:
            total_tags_needed = int(self.total_var.get())
            important_count = int(self.important_var.get()) if self.important_var.get() else 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            if len(self.permanent_tags) > total_tags_needed:
                messagebox.showerror(self.get_text("error_title"), self.get_text("error_main_tags_exceed"))
                return
            
            if important_count > (total_tags_needed - len(self.permanent_tags)):
                messagebox.showerror(self.get_text("error_title"), self.get_text("error_too_many_important"))
                return
            
            if important_count > len(self.important_tags):
                messagebox.showerror(self.get_text("error_title"), self.get_text("error_not_enough_important"))
                return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
            if self.excel_var.get():
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è Excel
                generations = int(self.generations_var.get()) if self.generations_var.get() else 1
                if generations <= 0:
                    messagebox.showerror(self.get_text("error_title"), self.get_text("error_generations_positive"))
                    return
                
                tags_list = []
                for i in range(generations):
                    tags_str = self.generate_single_tags()
                    tags_list.append(tags_str)
                
                # –ó–∞–ø–∏—Å—å –≤ Excel
                success, message = write_to_excel(
                    tags_list,
                    self.excel_file_var.get(),
                    self.cell_var.get(),
                    self.direction_var.get(),
                    self.sheet_var.get() if self.sheet_var.get() else None
                )

                if success:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.result_text.delete(1.0, tk.END)
                    if self.current_language == "RU":
                        self.result_text.insert(1.0, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {generations} –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ–≥–æ–≤:\n\n")
                    else:
                        self.result_text.insert(1.0, f"Generated {generations} sets of tags:\n\n")
                    
                    for i, tags in enumerate(tags_list[:5], 1):
                        self.result_text.insert(tk.END, f"{i}. {tags}\n\n")
                    
                    if generations > 5:
                        if self.current_language == "RU":
                            self.result_text.insert(tk.END, f"... –∏ –µ—â—ë {generations - 5} –Ω–∞–±–æ—Ä–æ–≤\n")
                        else:
                            self.result_text.insert(tk.END, f"... and {generations - 5} more sets\n")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
                    if message == "success_excel_write":
                        success_message = self.get_text("success_generated_multiple").format(
                            generations, 
                            self.get_text("success_excel_message").format(len(tags_list), self.excel_file_var.get())
                        )
                    else:
                        success_message = self.get_text("success_generated_multiple").format(generations, message)
                    
                    messagebox.showinfo(self.get_text("success_title"), success_message)
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                    if message.startswith("error_excel_write_generic:"):
                        error_detail = message.split(":", 1)[1]
                        error_msg = self.get_text("error_excel_write").format(error_detail)
                    else:
                        error_msg = self.get_text(message) if message in self.translations[self.current_language] else message
                    
                    messagebox.showerror(self.get_text("error_title"), error_msg)
            else:
                # –û–î–ò–ù–û–ß–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫–æ–≥–¥–∞ Excel –Ω–µ –≤—ã–±—Ä–∞–Ω)
                tags_str = self.generate_single_tags()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                if save_tags_to_file(tags_str.split(', '), 'result_tags.txt'):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.result_text.delete(1.0, tk.END)
                    self.result_text.insert(1.0, tags_str)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    tags_count = len(tags_str.split(', '))
                    permanent_used = min(len(self.permanent_tags), total_tags_needed)
                    other_used = tags_count - permanent_used - important_count
                    
                    messagebox.showinfo(self.get_text("success_title"), 
                        self.get_text("success_generated_single").format(
                            tags_count, 
                            permanent_used,
                            important_count,
                            other_used
                        )
                    )
                else:
                    messagebox.showerror(self.get_text("error_title"), self.get_text("error_save_file"))
                
        except ValueError:
            messagebox.showerror(self.get_text("error_title"), self.get_text("error_enter_valid_numbers"))
        except Exception as e:
            error_msg = self.get_text("error_unknown").format(str(e))
            messagebox.showerror(self.get_text("error_title"), error_msg)
    
    def copy_result(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        result = self.result_text.get(1.0, tk.END).strip()
        if result:
            self.root.clipboard_clear()
            self.root.clipboard_append(result)
            messagebox.showinfo(self.get_text("success_title"), self.get_text("success_copied"))
        else:
            messagebox.showwarning(self.get_text("warning_title"), self.get_text("warning_no_result"))

def main():
    # –ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    root = tk.Tk()
    app = TagGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")